-- -37.8060083,144.9518452

//IMPORTANT
lat: -37.8232,
    lon: 144.9729

SELECT 
id, username,
asin(
  sqrt(
    sin(radians(lat-(-37.8232))/2)^2 +
    sin(radians(lon-(144.9729))/2)^2 *
    cos(radians(-37.8232)) *
    cos(radians(lat))
  )
) * 7926.3352 AS distance
FROM users
;

// bottom one was used and it is in kilometers whilst the above one is in miles 
// hard  coded lon and lats need to be changed into the varialbles of the user

SELECT id, username, postcode, 
( 6371 * acos( cos( radians(-37.8060083) ) 
* cos( radians( lat ) ) 
* cos( radians( lon ) - radians(144.9518452) ) + sin( radians(-37.8060083) ) 
* sin( radians( lat ) ) ) ) 
AS calculated_distance 
FROM users
ORDER BY calculated_distance;



SELECT id, username, postcode, 
( 6371 * acos( cos( radians(-37.8060083) ) 
* cos( radians( lat ) ) 
* cos( radians( lon ) - radians(144.9518452) ) + sin( radians(-37.8060083) ) 
* sin( radians( lat ) ) ) ) 
AS calculated_distance 
FROM users
WHERE ( 6371 * acos( cos( radians(-37.8060083) ) 
* cos( radians( lat ) ) 
* cos( radians( lon ) - radians(144.9518452) ) + sin( radians(-37.8060083) ) 
* sin( radians( lat ) ) ) ) < 3
ORDER BY calculated_distance;

@comments = Like
              .select("comment_id, COUNT(*) AS likes")
              .where("comment_id IN (SELECT id FROM comments WHERE picture_id = ?)", @picture.id)
              .group(:comment_id)
              .order(likes: :desc)

              
# sanitized_distance_query = ActiveRecord::Base.sanitize_sql_array ["( 6371 * acos( cos( radians(?) ) * cos( radians( lat ) ) * cos( radians( lon ) - radians(?) ) + sin( radians(?) ) * sin( radians( lat ) ) ) )", current_user.lat, current_user.lon, current_user.lat]

# sanitized_distance_query_with_alias = sanitized_distance_query + " AS calculated_distance"

# data = User.select("id, username, postcode, #{sanitized_distance_query_with_alias}").where("#{sanitized_distance_query} < ?", 3).order("calculated_distance")


SELECT id, username, postcode, 
( 6371 * acos( cos( radians(-37.8060083) ) 
* cos( radians( lat ) ) 
* cos( radians( lon ) - radians(144.9518452) ) + sin( radians(-37.8060083) ) 
* sin( radians( lat ) ) ) ) 
AS calculated_distance 
FROM users
ORDER BY calculated_distance;



SELECT id, username, postcode, 
( 6371 * acos( cos( radians(-37.8060083) ) 
* cos( radians( lat ) ) 
* cos( radians( lon ) - radians(144.9518452) ) + sin( radians(-37.8060083) ) 
* sin( radians( lat ) ) ) ) 
AS calculated_distance 
FROM users
WHERE ( 6371 * acos( cos( radians(-37.8060083) ) 
* cos( radians( lat ) ) 
* cos( radians( lon ) - radians(144.9518452) ) + sin( radians(-37.8060083) ) 
* sin( radians( lat ) ) ) ) < 3
ORDER BY calculated_distance;
 
User
              .select("id, username, postcode, ( 6371 * acos( cos( radians(?) ) 
              * cos( radians( lat ) ) 
              * cos( radians( lon ) - radians(?) ) + sin( radians(?) ) 
              * sin( radians( lat ) ) ) ) 
              AS calculated_distance ", current_user.lat, current_user.lon, current_user.lat)
              .where("( 6371 * acos( cos( radians(?) ) 
              * cos( radians( lat ) ) 
              * cos( radians( lon ) - radians(?) ) + sin( radians(?) ) 
              * sin( radians( lat ) ) ) ) < ?", current_user.lat, current_user.lon, current_user.lat, 3)
              .order("calculated_distance")


// current_user.lat
// current_user.lon



SELECT id, username, postcode, 
( 6371 * acos( cos( radians(-37.8060083) ) 
* cos( radians( lat ) ) 
* cos( radians( lon ) - radians(144.9518452) ) + sin( radians(-37.8060083) ) 
* sin( radians( lat ) ) ) ) 
AS calculated_distance 
FROM users
ORDER BY calculated_distance;



SELECT id, username, postcode, 
( 6371 * acos( cos( radians(-37.8060083) ) 
* cos( radians( lat ) ) 
* cos( radians( lon ) - radians(144.9518452) ) + sin( radians(-37.8060083) ) 
* sin( radians( lat ) ) ) ) 
AS calculated_distance 
FROM users
WHERE ( 6371 * acos( cos( radians(-37.8060083) ) 
* cos( radians( lat ) ) 
* cos( radians( lon ) - radians(144.9518452) ) + sin( radians(-37.8060083) ) 
* sin( radians( lat ) ) ) ) < 3
ORDER BY calculated_distance;



current_user = User.last
data = User
              .select("id, username, postcode, ( 6371 * acos( cos( radians(?) ) 
              * cos( radians( lat ) ) 
              * cos( radians( lon ) - radians(?) ) + sin( radians(?) ) 
              * sin( radians( lat ) ) ) ) 
              AS calculated_distance ", current_user.lat, current_user.lon, current_user.lat)
              .where("( 6371 * acos( cos( radians(?) ) 
              * cos( radians( lat ) ) 
              * cos( radians( lon ) - radians(?) ) + sin( radians(?) ) 
              * sin( radians( lat ) ) ) ) < ?", current_user.lat, current_user.lon, current_user.lat, 3)
              .order("calculated_distance")


# data = User.select("id, username, postcode, ( 6371 * acos( cos( radians(?) ) * cos( radians( lat ) ) * cos( radians( lon ) - radians(?) ) + sin( radians(?) ) * sin( radians( lat ) ) ) ) AS calculated_distance ", current_user.lat, current_user.lon, current_user.lat).where("( 6371 * acos( cos( radians(?) ) * cos( radians( lat ) ) * cos( radians( lon ) - radians(?) ) + sin( radians(?) ) * sin( radians( lat ) ) ) ) < ?", current_user.lat, current_user.lon, current_user.lat, 3).order("calculated_distance")